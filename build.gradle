plugins {
    id 'java'
    id 'java-library'
    id 'groovy-base'
    id 'maven-publish'
    id 'signing'
}

ext."signing.keyId" = System.getenv("SIGNING_KEY_ID")
ext."signing.password" = System.getenv("SIGNING_KEY_PASSWORD")
ext."signing.secretKeyRingFile" = System.getenv("SIGNING_KEY_PATH")

repositories {
    mavenCentral()
    def localRepo = '/opt/mvn-local-repo'
    if (localRepo != null) {
        maven {
            url 'file://' + localRepo
        }
    }
}
sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
    test {
        groovy {
            srcDirs = [
                    'src/test/groovy',
            ]
        }
    }
}

task artifactVersion {
    doFirst {
        def releaseType = System.getenv("RELEASE_TYPE")
        if (releaseType == 'SNAPSHOT') {
            project.version += '-SNAPSHOT'
        }
    }
}
task publishArtifact {
    dependsOn 'clean'
    dependsOn 'artifactVersion'
    dependsOn 'build'
    dependsOn 'publish'
    tasks.findByName('artifactVersion').mustRunAfter 'clean'
    tasks.findByName('build').mustRunAfter 'artifactVersion'
    tasks.findByName('publish').mustRunAfter 'build'
}
task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}
publishing {
    publications {
        "${project.name}"(MavenPublication) {
            from project.components.java
            artifact sourceJar
            artifact javadocJar
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                groupId = project.group
                artifactId = project.artifactId
                name = project.name
                description = project.description
                url = project.url
                organization {
                    name = organisationName
                    url = organisationUrl
                }
                issueManagement {
                    system = issueMgmtSystem
                    url = issueMgmtSystemUrl
                }
                licenses {
                    license {
                        name = license
                        url = licenseUrl
                        distribution = licenseDistribution
                    }
                }
                scm {
                    url = scmUrl
                    connection = scmConnection
                    developerConnection = scmDevConnection
                }
                developers {
                    developer {
                        name = developer
                    }
                }
            }
        }
    }
    repositories {
        def releaseType = System.getenv("RELEASE_TYPE")

        if (releaseType == "SNAPSHOT") {
            maven {
                name 'OSS_Sonatype_Snapshot'
                url 'https://oss.sonatype.org/content/repositories/snapshots'
                credentials {
                    username System.getenv('SONATYPE_USERNAME')
                    password System.getenv('SONATYPE_PASSWORD')
                }
            }
        }
        if (releaseType == "RELEASE") {
            maven {
                name 'OSS_Sonatype_Staging'
                url 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
                credentials {
                    username System.getenv('SONATYPE_USERNAME')
                    password System.getenv('SONATYPE_PASSWORD')
                }
            }
        }
        def localRepo = System.getenv('MVN_LOCAL_REPO')
        if (localRepo != null) {
            maven {
                url 'file://' + localRepo
            }
        }
    }
}
signing {
    sign publishing.publications."${project.name}"
}
dependencies {
    implementation group: 'pl.grizzlysoftware', name: 'dotykacka-java-api-client', version: dotykackaApiJavaClientVersion
    implementation group: 'pl.grizzlysoftware', name: 'grizzlysoftware-commons', version: grizzlysoftwareCommonsVersion
    implementation group: 'pl.grizzlysoftware.chlorek.core', name: 'chlorek-core-model', version: chlorekCoreModelVersion
    implementation group: 'pl.grizzlysoftware.chlorek.core', name: 'chlorek-core-service', version: chlorekCoreServiceVersion


    implementation group: 'org.apache.commons', name: 'commons-lang3', version: commonsLangVersion
    implementation group: 'org.apache.commons', name: 'commons-text', version: commonsTextVersion

    compileOnly group: 'org.projectlombok', name: 'lombok', version: lombokVersion
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"


    testImplementation group: 'org.codehaus.groovy', name:'groovy-all', version: groovyVersion
    testImplementation group: 'org.spockframework', name: 'spock-core', version: spockVersion
    testImplementation group: 'net.bytebuddy', name: 'byte-buddy', version: byteBuddyVersion
    testImplementation group: 'org.objenesis', name: 'objenesis', version: objenesisVersion
}
